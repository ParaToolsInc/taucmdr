# The last two jobs, unit testing and runnng TAU=full installation wait until the first finishes and re-uses the TAU=minimal install
# Unfortunately, there is a lot of duplicated code that could be simplified/eliminated with YAML anchors and aliases,
# but GitHub Actions does not yet support YAML anchors and aliases.
# Clever use of global environment variables could help eliminate some of it, but the best options would be to just use aliases and anchors

name: CI

on:
  push:
  pull_request:
    types: [opened, synchronize]

env:
  __TAUCMDR_PROGRESS_BARS__: "disabled"
  __TAUCMDR_SYSTEM_PREFIX__: "system"
  CI: "ON"
  INSTALLDIR: "taucmdr"
  PIP_NO_CLEAN: "ON"
  PIP_PREFER_BINARY: "ON"
  TZ: "UTC"

jobs:
  Install-taucmdr-minimal:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-16.04]
        python_version: ['2.7']

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 9999

      - name: Install system packages
        run: |
          sudo apt-get update -qq || true
          sudo apt-get install -y --no-install-recommends gcc g++ gfortran mpi-default-bin mpi-default-dev

      # - name: Setup Python
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: '3.6'
      #     architecture: 'x64'

      - name: System info
        id: info
        run: |
          uname -a
          mount
          gcc --version
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.ref:        ${{ github.ref }}"
          echo "matrix.os:         ${{ matrix.os }}"
          export INSTALLDIR="${HOME}/${INSTALLDIR}"
          echo "::set-output name=install_dir::${INSTALLDIR}"
          echo "::set-env name=INSTALLDIR::${INSTALLDIR}"
          echo "::set-output name=home_dir::${HOME}"
          echo "::set-output name=taucmdr_system::${INSTALLDIR}/${__TAUCMDR_SYSTEM_PREFIX__}"
          echo "::set-env name=__TAUCMDR_SYSTEM_PREFIX__::${INSTALLDIR}/${__TAUCMDR_SYSTEM_PREFIX__}"

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.info.outputs.install_dir}}/conda
          key: ${{ runner.os }}-pip${{ matrix.python_version }}-${{ hashFiles('**/requirements-dev.txt') }}-${{ hashFiles('**/CI.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pip${{ matrix.python_version }}-${{ hashFiles('**/requirements-dev.txt') }}-${{ hashFiles('**/CI.yml') }}

      - name: Cache TAU sources
        uses: actions/cache@v1
        with:
          path: ${{ steps.info.outputs.taucmdr_system}}/src
          key: ${{ matrix.os }}-system-src-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-system-src-

      - name: Install TAU Commander
        run: |
          make INSTALLDIR="${INSTALLDIR}" install
          echo "::add-path::${INSTALLDIR}/conda/bin"
          export PATH="${INSTALLDIR}/conda/bin:${PATH}"
          which python
          which pip
          python -m pip install -U pip
          python -m pip install -U --prefix "${INSTALLDIR}/conda" -r requirements-dev.txt
          cd "${HOME}"
          zip -vr taucmdr.zip ${INSTALLDIR##*/} -x "taucmdr/system/src/*" -x "taucmdr/conda/*"

      - name: Upload TAU Commander install log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: taucmdr-tau-minimal-debug-log-${{ matrix.os }}
          path: ${{ steps.info.outputs.home_dir }}/.local/taucmdr/debug_log

      - name: Upload TAU Commander minimal install
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: taucmdr-installation-${{ matrix.os }}
          path: ${{ steps.info.outputs.home_dir }}/taucmdr.zip

  Install-taucmdr-full:
    needs: Install-taucmdr-minimal
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-18.04, ubuntu-16.04]
        python_version: ['2.7']

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 9999

      - name: Install system packages
        run: |
          sudo apt-get update -qq || true
          sudo apt-get install -y --no-install-recommends gcc g++ gfortran mpi-default-bin mpi-default-dev

      # - name: Setup Python
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: '3.6'
      #     architecture: 'x64'

      - name: System info
        id: info
        run: |
          uname -a
          mount
          gcc --version
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.ref:        ${{ github.ref }}"
          echo "matrix.os:         ${{ matrix.os }}"
          export INSTALLDIR="${HOME}/${INSTALLDIR}"
          echo "::set-output name=install_dir::${INSTALLDIR}"
          echo "::set-env name=INSTALLDIR::${INSTALLDIR}"
          echo "::set-output name=home_dir::${HOME}"
          echo "::set-output name=taucmdr_system::${INSTALLDIR}/${__TAUCMDR_SYSTEM_PREFIX__}"
          echo "::set-env name=__TAUCMDR_SYSTEM_PREFIX__::${INSTALLDIR}/${__TAUCMDR_SYSTEM_PREFIX__}"
          echo "::add-path::${INSTALLDIR}/conda/bin"
          export PATH="${INSTALLDIR}/conda/bin:${PATH}"

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.info.outputs.install_dir}}/conda
          key: ${{ runner.os }}-pip${{ matrix.python_version }}-${{ hashFiles('**/requirements-dev.txt') }}-${{ hashFiles('**/CI.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pip${{ matrix.python_version }}-${{ hashFiles('**/requirements-dev.txt') }}-${{ hashFiles('**/CI.yml') }}

      - name: Cache TAU sources
        uses: actions/cache@v1
        with:
          path: ${{ steps.info.outputs.taucmdr_system}}/src
          key: ${{ matrix.os }}-system-src-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-system-src-

      - name: Download installed TAU Commander
        uses: actions/download-artifact@v1
        with:
          name: taucmdr-installation-${{ matrix.os }}
          path: ${{ steps.info.outputs.home_dir }}

      - name: Extract TAU minimal install
        run: |
          cd "${HOME}" && ls -la && ls -la taucmdr && unzip -o taucmdr.zip && ls -la && ls -la taucmdr

      - name: Install Full TAU
        run: ${{ steps.info.outputs.taucmdr_system }}/configure

      - name: Upload TAU Commander full-TAU install log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: taucmdr-full-tau-debug-log-${{ matrix.os }}
          path: ${{ steps.info.outputs.home_dir }}/.local/taucmdr/debug_log

      - name: tau_validate
        if: always()
        run: |
          cd ${{ steps.info.outputs.taucmdr_system }}/tau/tau-2*
          printf '#!/bin/bash\nmpirun -np 2 ./simple\n' > parallel.sh
          export TAU_VALIDATE_PARALLEL="$(pwd)/parallel.sh"
          ./tau_validate -v --html --table table.html --timeout 180 x86_64 &> results.html || true
          mkdir "${HOME}/tau-full-validate"
          cp table.html results.html "${HOME}/tau-full-validate"

      - name: Upload full-TAU validate
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: taucmdr-full-tau-validate-${{ matrix.os }}-${{ github.sha }}
          path: ${{ steps.info.outputs.home_dir }}/tau-full-validate

  Unit-test-taucmdr:
    needs: Install-taucmdr-minimal
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-16.04]
        python_version: ['2.7']

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 9999

      - name: Install system packages
        run: |
          sudo apt-get update -qq || true
          sudo apt-get install -y --no-install-recommends gcc g++ gfortran mpi-default-bin mpi-default-dev

      # - name: Setup Python
      #   uses: actions/setup-python@v1
      #   with:
      #     python-version: '3.6'
      #     architecture: 'x64'

      - name: System info
        id: info
        run: |
          uname -a
          mount
          gcc --version
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.ref:        ${{ github.ref }}"
          echo "matrix.os:         ${{ matrix.os }}"
          export INSTALLDIR="${HOME}/${INSTALLDIR}"
          echo "::set-output name=install_dir::${INSTALLDIR}"
          echo "::set-env name=INSTALLDIR::${INSTALLDIR}"
          echo "::set-output name=home_dir::${HOME}"
          echo "::set-output name=taucmdr_system::${INSTALLDIR}/${__TAUCMDR_SYSTEM_PREFIX__}"
          echo "::set-env name=__TAUCMDR_SYSTEM_PREFIX__::${INSTALLDIR}/${__TAUCMDR_SYSTEM_PREFIX__}"
          echo "::add-path::${INSTALLDIR}/conda/bin"
          export PATH="${INSTALLDIR}/conda/bin:${PATH}"

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.info.outputs.install_dir}}/conda
          key: ${{ runner.os }}-pip${{ matrix.python_version }}-${{ hashFiles('**/requirements-dev.txt') }}-${{ hashFiles('**/CI.yml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pip${{ matrix.python_version }}-${{ hashFiles('**/requirements-dev.txt') }}-${{ hashFiles('**/CI.yml') }}

      - name: Cache TAU sources
        uses: actions/cache@v1
        with:
          path: ${{ steps.info.outputs.taucmdr_system}}/src
          key: ${{ matrix.os }}-system-src-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-system-src-

      - name: Download installed TAU Commander
        uses: actions/download-artifact@v1
        with:
          name: taucmdr-installation-${{ matrix.os }}
          path: ${{ steps.info.outputs.home_dir }}

      - name: Extract TAU minimal install
        run: |
          cd "${HOME}" && ls -la && ls -la taucmdr && unzip -o taucmdr.zip && ls -la && ls -la taucmdr

      - name: Test TAU Commander with TinyDB backend
        run: |
          export __TAUCMDR_DB_BACKEND__=tinydb
          coverage run setup.py test

      - name: Test TAU Commander with SQLite backend
        run: |
          export __TAUCMDR_DB_BACKEND__=sqlite
          coverage run setup.py test

      - name: Build sphinx docs
        run: |
          python setup.py build_sphinx

      - name: Upload TAU Commander unit test log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: taucmdr-unit-test-debug-log-${{ matrix.os }}
          path: ${{ steps.info.outputs.home_dir }}/.local/taucmdr/debug_log

      - name: Deploy Sphinx docs
        uses: peaceiris/actions-gh-pages@v3
        if: success() && github.event_name == 'push' && ( github.ref == 'refs/heads/master' || github.ref == 'refs/heads/unstable' ) && matrix.os == 'ubuntu-18.04'
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          enable_jekyll: false
          allow_empty_commit: true
          publish_dir: ./build/sphinx/html
          username: ${{ github.actor }}
          commitMessage: "Documentation for commit ${{ github.sha }}"
          keep_files: false

      - name: tau_validate
        if: always()
        run: |
          cd ${{ steps.info.outputs.taucmdr_system }}/tau/tau-2*
          printf '#!/bin/bash\nmpirun -np 2 ./simple\n' > parallel.sh
          export TAU_VALIDATE_PARALLEL="$(pwd)/parallel.sh"
          ./tau_validate -v --html --table table.html --timeout 180 x86_64 &> results.html || true
          mkdir "${HOME}/tau-tests-validate"
          cp table.html results.html "${HOME}/tau-tests-validate"

      - name: Upload unit tests TAU validate
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: taucmdr-full-tau-validate-${{ matrix.os }}-${{ github.sha }}
          path: ${{ steps.info.outputs.home_dir }}/tau-tests-validate
