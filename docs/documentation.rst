TAU Commander Code Documentation
================================

.. contents::

Introduction
------------

**DOCUMENT YOUR CODE**

If you can, write the function's `docstring`_ first, before you write the
actual code. This can help you clarify in your own mind what the code does and
help you write code that *actually does* what it was *intended to do*.

Python has documentation built into the language and this makes it very easy to
keep your code documented.  It also makes it easy to keep the project design
documents up to date.  In fact, all the TAU Commander API documentation is
automatically generated by `Sphinx`_ using the original Python source code files
as input.  Since we use `Sphinx`_ your `docstring`_ may contain
`reStructuredText`_.


Updating the Developer Documentation
------------------------------------

The TAU Commander developer documentation is hosted on the project's
`github page <http://github.com/ParaToolsInc/taucmdr>`_.  Use the setup.py script
to update these pages from the master branch.

::

  $ python setup.py build_sphinx
  # Check for errors
  $ python setup.py build_sphinx --update-gh-pages

You'll see the new documentation at http://paratoolsinc.github.io/taucmdr.


File Header
-----------

All Python files must begin with a file encoding string, followed by the
license boilerplate text, followed by the module's docstring.
**Do not** include the following in the header or the module docstring:

  * File creation or modification dates since these are always wrong
    and git tracks it for us automatically.
  * File creator or author since git tracks this.
  * File version since git tracks this.
  * File maintainer since we can work out who is maintaining the file
    from the git log.
  * File maturity status, e.g. "production" since this is a fairly
    meaningless concept.

For the same reasons, do not be tempted to set any of the additional
metadata module members that some Python parsers recognize, e.g.
``__author__`` and ``__copyright__``.  Just don't do it. In fact, any
time you set a global variable of the form ``__some_name__`` be extra
certain that you're not doing something wrong.

**Example of a Correct File Header**

::

  # -*- coding: utf-8 -*-
  #
  # Copyright (c) <YEAR>, ParaTools, Inc.
  # All rights reserved.
  #
  # Redistribution and use in source and binary forms, with or without
  # modification, are permitted provided that the following conditions are met:
  # (1) Redistributions of source code must retain the above copyright notice,
  #     this list of conditions and the following disclaimer.
  # (2) Redistributions in binary form must reproduce the above copyright notice,
  #     this list of conditions and the following disclaimer in the documentation
  #     and/or other materials provided with the distribution.
  # (3) Neither the name of ParaTools, Inc. nor the names of its contributors may
  #     be used to endorse or promote products derived from this software without
  #     specific prior written permission.
  #
  # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  # SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  #
  """Short, one-line module description.

  Long module description.
  """


Comments
--------

Be sure to use the right style for module, function, method and in-line
comments.

Doc Strings
~~~~~~~~~~~

Python has a unique commenting style using doc strings. A doc string is
a string that is the first statement in a package, module, class or
function. These strings can be extracted automatically through the
``__doc__`` member of the object and are used by ``pydoc``. (Try running
``pydoc`` on your module to see how it looks.) We always use the three
double-quote ``"""`` format for doc strings (per `PEP
257 <http://www.python.org/dev/peps/pep-0257/>`__). A doc string should
be organized as a summary line (one physical line) terminated by a
period, question mark, or exclamation point, followed by a blank line,
followed by the rest of the doc string starting at the same cursor
position as the first quote of the first line. There are more formatting
guidelines for doc strings below.

Modules
~~~~~~~

Every file should contain BSD license boilerplate as seen in the above example.

Functions and Methods
~~~~~~~~~~~~~~~~~~~~~

As used in this section "function" applies to methods, function, and
generators.

A function must have a docstring, unless it meets all of the following
criteria (pylint will enforce this):

-  not externally visible
-  very short
-  obvious

A docstring should give enough information to write a call to the
function without reading the function's code. A docstring should
describe the function's calling syntax and its semantics, not its
implementation. For tricky code, comments alongside the code are more
appropriate than using docstrings.

Certain aspects of a function should be documented in special sections,
listed below. Each section begins with a heading line, which ends with a
colon. Sections should be indented two spaces, except for the heading.

**Args:**
    List each parameter by name. A description should follow the name,
    and be separated by a colon and a space. If the description is too
    long to fit on a single 80-character line, use a hanging indent of 2
    or 4 spaces (be consistent with the rest of the file).

    The description should mention required type(s) and the meaning of
    the argument.

    If a function accepts \*foo (variable length argument lists) and/or
    \*\*bar (arbitrary keyword arguments), they should be listed as
    \*foo and \*\*bar.

**Returns: (or Yields: for generators)**
    Describe the type and semantics of the return value. If the function
    only returns None, this section is not required.

**Raises:**
    List all exceptions that are relevant to the interface.

::

    def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):
        """Fetches rows from a Bigtable.

        Retrieves rows pertaining to the given keys from the Table instance
        represented by big_table.  Silly things may happen if
        other_silly_variable is not None.

        Args:
            big_table: An open Bigtable Table instance.
            keys: A sequence of strings representing the key of each table row
                to fetch.
            other_silly_variable: Another optional variable, that has a much
                longer name than the other args, and which does nothing.

        Returns:
            A dict mapping keys to the corresponding table row data
            fetched. Each row is represented as a tuple of strings. For
            example:

            {'Serak': ('Rigel VII', 'Preparer'),
             'Zim': ('Irk', 'Invader'),
             'Lrrr': ('Omicron Persei 8', 'Emperor')}

            If a key from the keys argument is missing from the dictionary,
            then that row was not found in the table.

        Raises:
            IOError: An error occurred accessing the bigtable.Table object.
        """
        pass

Classes
~~~~~~~

Classes should have a doc string below the class definition describing
the class. If your class has public attributes, they should be
documented here in an Attributes section and follow the same formatting
as a function's Args section.

::

    class SampleClass(object):
        """Summary of class here.

        Longer class information....
        Longer class information....

        Attributes:
            likes_spam: A boolean indicating if we like SPAM or not.
            eggs: An integer count of the eggs we have laid.
        """

        def __init__(self, likes_spam=False):
            """Inits SampleClass with blah."""
            self.likes_spam = likes_spam
            self.eggs = 0

        def public_method(self):
            """Performs operation blah."""

Block and Inline Comments
~~~~~~~~~~~~~~~~~~~~~~~~~

The final place to have comments is in tricky parts of the code. If
you're going to have to explain it at the next `code
review <http://en.wikipedia.org/wiki/Code_review>`__, you should comment
it now. Complicated operations get a few lines of comments before the
operations commence. Non-obvious ones get comments at the end of the
line.

::

    # We use a weighted dictionary search to find out where i is in
    # the array.  We extrapolate position based on the largest num
    # in the array and the array size and then do binary search to
    # get the exact number.

    if i & (i-1) == 0:        # true iff i is a power of 2

To improve legibility, these comments should be at least 2 spaces away
from the code.

On the other hand, never describe the code. Assume the person reading
the code knows Python (though not what you're trying to do) better than
you do.

::

    # BAD COMMENT: Now go through the b array and make sure whenever i occurs
    # the next element is i+1


Full Documentation Example
--------------------------

::

  # -*- coding: utf-8 -*-
  """Example Google style docstrings.

  This module demonstrates documentation as specified by the `Google Python
  Style Guide`_. Docstrings may extend over multiple lines. Sections are created
  with a section header and a colon followed by a block of indented text.

  Example:
      Examples can be given using either the ``Example`` or ``Examples``
      sections. Sections support any reStructuredText formatting, including
      literal blocks::

          $ python example_google.py

  Section breaks are created by resuming unindented text. Section breaks
  are also implicitly created anytime a new section starts.

  Attributes:
      module_level_variable1 (int): Module level variables may be documented in
          either the ``Attributes`` section of the module docstring, or in an
          inline docstring immediately following the variable.

          Either form is acceptable, but the two should not be mixed. Choose
          one convention to document module level variables and be consistent
          with it.

  .. _Google Python Style Guide:
    http://google.github.io/styleguide/pyguide.html

  """

  module_level_variable1 = 12345

  module_level_variable2 = 98765
  """int: Module level variable documented inline.

  The docstring may span multiple lines. The type may optionally be specified
  on the first line, separated by a colon.
  """


  def module_level_function(param1, param2=None, *args, **kwargs):
      """This is an example of a module level function.

      Function parameters should be documented in the ``Args`` section. The name
      of each parameter is required. The type and description of each parameter
      is optional, but should be included if not obvious.

      Parameter types -- if given -- should be specified according to
      `PEP 484`_, though `PEP 484`_ conformance isn't required or enforced.

      If *args or **kwargs are accepted,
      they should be listed as ``*args`` and ``**kwargs``.

      The format for a parameter is::

          name (type): description
              The description may span multiple lines. Following
              lines should be indented. The "(type)" is optional.

              Multiple paragraphs are supported in parameter
              descriptions.

      Args:
          param1 (int): The first parameter.
          param2 (Optional[str]): The second parameter. Defaults to None.
              Second line of description should be indented.
          *args: Variable length argument list.
          **kwargs: Arbitrary keyword arguments.

      Returns:
          bool: True if successful, False otherwise.

          The return type is optional and may be specified at the beginning of
          the ``Returns`` section followed by a colon.

          The ``Returns`` section may span multiple lines and paragraphs.
          Following lines should be indented to match the first line.

          The ``Returns`` section supports any reStructuredText formatting,
          including literal blocks::

              {
                  'param1': param1,
                  'param2': param2
              }

      Raises:
          AttributeError: The ``Raises`` section is a list of all exceptions
              that are relevant to the interface.
          ValueError: If ``param2`` is equal to ``param1``.


      .. _PEP 484:
        https://www.python.org/dev/peps/pep-0484/

      """
      if param1 == param2:
          raise ValueError('param1 may not be equal to param2')
      return True


  def example_generator(n):
      """Generators have a ``Yields`` section instead of a ``Returns`` section.

      Args:
          n (int): The upper limit of the range to generate, from 0 to `n` - 1.

      Yields:
          int: The next number in the range of 0 to `n` - 1.

      Examples:
          Examples should be written in doctest format, and should illustrate how
          to use the function.

          >>> print([i for i in example_generator(4)])
          [0, 1, 2, 3]

      """
      for i in range(n):
          yield i


  class ExampleError(Exception):
      """Exceptions are documented in the same way as classes.

      The __init__ method may be documented in either the class level
      docstring, or as a docstring on the __init__ method itself.

      Either form is acceptable, but the two should not be mixed. Choose one
      convention to document the __init__ method and be consistent with it.

      Note:
          Do not include the ``self`` parameter in the ``Args`` section.

      Args:
          msg (str): Human readable string describing the exception.
          code (Optional[int]): Error code.

      Attributes:
          msg (str): Human readable string describing the exception.
          code (int): Exception error code.

      """

      def __init__(self, msg, code):
          self.msg = msg
          self.code = code


  class ExampleClass(object):
      """The summary line for a class docstring should fit on one line.

      If the class has public attributes, they may be documented here
      in an ``Attributes`` section and follow the same formatting as a
      function's ``Args`` section. Alternatively, attributes may be documented
      inline with the attribute's declaration (see __init__ method below).

      Properties created with the ``@property`` decorator should be documented
      in the property's getter method.

      Attribute and property types -- if given -- should be specified according
      to `PEP 484`_, though `PEP 484`_ conformance isn't required or enforced.

      Attributes:
          attr1 (str): Description of ``attr1``.
          attr2 (Optional[int]): Description of ``attr2``.


      .. _PEP 484:
        https://www.python.org/dev/peps/pep-0484/

      """

      def __init__(self, param1, param2, param3):
          """Example of docstring on the __init__ method.

          The __init__ method may be documented in either the class level
          docstring, or as a docstring on the __init__ method itself.

          Either form is acceptable, but the two should not be mixed. Choose one
          convention to document the __init__ method and be consistent with it.

          Note:
              Do not include the ``self`` parameter in the ``Args`` section.

          Args:
              param1 (str): Description of ``param1``.
              param2 (Optional[int]): Description of ``param2``. Multiple
                  lines are supported.
              param3 (List[str]): Description of ``param3``.

          """
          self.attr1 = param1
          self.attr2 = param2
          self.attr3 = param3  #: Doc comment *inline* with attribute

          #: List[str]: Doc comment *before* attribute, with type specified
          self.attr4 = ['attr4']

          self.attr5 = None
          """Optional[str]: Docstring *after* attribute, with type specified."""

      @property
      def readonly_property(self):
          """str: Properties should be documented in their getter method."""
          return 'readonly_property'

      @property
      def readwrite_property(self):
          """List[str]: Properties with both a getter and setter should only
          be documented in their getter method.

          If the setter method contains notable behavior, it should be
          mentioned here.
          """
          return ['readwrite_property']

      @readwrite_property.setter
      def readwrite_property(self, value):
          value

      def example_method(self, param1, param2):
          """Class methods are similar to regular functions.

          Note:
              Do not include the ``self`` parameter in the ``Args`` section.

          Args:
              param1: The first parameter.
              param2: The second parameter.

          Returns:
              True if successful, False otherwise.

          """
          return True

      def __special__(self):
          """By default special members with docstrings are included.

          Special members are any methods or attributes that start with and
          end with a double underscore. Any special member with a docstring
          will be included in the output.

          This behavior can be disabled by changing the following setting in
          Sphinx's conf.py::

              napoleon_include_special_with_doc = False

          """
          pass

      def __special_without_docstring__(self):
          pass

      def _private(self):
          """By default private members are not included.

          Private members are any methods or attributes that start with an
          underscore and are *not* special. By default they are not included
          in the output.

          This behavior can be changed such that private members *are* included
          by changing the following setting in Sphinx's conf.py::

              napoleon_include_private_with_doc = True

          """
          pass

      def _private_without_docstring(self):
          pass


.. _docstring: https://www.python.org/dev/peps/pep-0257/
.. _Sphinx: http://sphinx-doc.org/
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
