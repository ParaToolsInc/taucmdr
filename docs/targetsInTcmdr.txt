
--with-* for target
PDT
SCOREP ==. tau are now wrappers for scorep so sitll needs to be built
BFD
LIBUNWIND


compiler determines [these are going to be flavors of experiments]
-CUDA
-UPC
-MPI



Example:

Project: Compare Intel and GNU compilers for a patircular app on a paticular machine:
   a) one target
   b) one app
   c) with many measurements

experiment 1:
L1 cache misses between Intel and GNU [name of experiemnt] 
   trial[1-10] Intel compilers 
      -l1 measure
   trial[11-20] GNU compiler 
      -l1 measure 
   ** these are just olelctions of data


Experiment 2:
Vector Intensity: 
  --- similar trial count for both compilers


Experiment for 1 and 2 have the same analysis:
1: variance within compiler Intel
2: variance within compiler GNU
3: sig. diff of means between compilers [this answer the question ]
    
Experiment 3:
What is memory high-water-mark:
1:Tau can give use this info

analysis: print number

tau measurement create l1misses --add-metrics TIME PAPI_L1_DCM
tau measurement create vecI --add-metrics TIME PAPI_VEC_DP
tau measurement create time --add-metrics TIME 

tau application create matmult

tau target create localhost --with-pdt=download 
   -- now we know host system (OS) and hardware (CPU + possible COPROC)
   -- empty fields for [that need to be filled]:
      -- compilers
         -- possible use of compiler vendor 3rd party libraries
      -- mpi
      -- third party libraries 




IF threadspotter is the tool then command is "tspot" not tau.
"tau" command assumes a tau will be built or an installation will be used for all experiments.


tau project create compilerCompare

tau project select compilerCompare localhost matmult l1misses => Experiment 1 with empyt compiler fields
tau project select compilerCompare localhost matmult vecI => Experiment 2 with empyt compiler fields
tau project select compilerCompare localhost matmult time => Experiment 3 with empty compiler fields

** When we invoke the compiler choice the empty fields will populated.  So there must be a compilerInfoHaverster 

tau gcc *.c -o mm_with_gcc
  -- probe gcc to get 
     -- version 
     -- location
     -- system wrappers
     -- md5 hash of the gcc to notifie user if things changed
     -- ?? 
   => this populates experiment missing fields
tau target info localhost
 
tau icc *.c -o mm_with_icc


==========
** commander subcommand will interact with the cloud
tau commander pull target stampede
tau dash  ==> will show all targets applications and measurements predefined


and if one makes a project for a host and wants to push to cloud:

tau commander push  <project name> 





