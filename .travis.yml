language: python
virtualenv:
  system_site_packages: true

branches:
  except:
    - gh-pages

git:
  depth: 99999

sudo: false
os:
  - linux

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gfortran
      - bc
      - python
      - python-pip
      - python-virtualenv

cache:
    directories:
      - "$HOME/.local"
      - "$HOME/.pylint.d"
      - "$HOME/.cache/pip"
      - "$HOME/.pyenv"

# Add more python versions to this array to expand test matrix for Precise
env:
  - PYENV_VERSION='2.7.9' OS='Ubuntu Precise'
  - PYENV_VERSION='system' OS='Ubuntu Precise'

# Matrix include is single entry only, so a new one for each add'l config is required
matrix:
  include:
    - language: python
      os: linux
      sudo: required
      dist: trusty
      env: PYENV_VERSION='2.7.9' OS='Ubuntu Trusty'
    - language: generic
      os: osx
      osx_image: xcode7.1 # Corresponds to 10.10.x (Yosemite)
      env: PYENV_VERSION='2.7.9' OS='OS X Yosemite'
    - language: generic
      os: osx
      osx_image: xcode7.2 # Corresponds to 10.11.x (El Capitan)
      env: PYENV_VERSION='2.7.9' OS='OS X El Capitan'
    - language: python
      os: linux
      sudo: required
      dist: trusty
      env: PYENV_VERSION='system' OS='Ubuntu Trusty'
    - language: generic
      os: osx
      osx_image: xcode7.1 # Corresponds to 10.10.x (Yosemite)
      env: PYENV_VERSION='system' OS='OS X Yosemite'
    - language: generic
      os: osx
      osx_image: xcode7.2 # Corresponds to 10.11.x (El Capitan)
      env: PYENV_VERSION='system' OS='OS X El Capitan'
  allow_failures:
    - env: PYENV_VERSION='2.7.9' OS='Ubuntu Trusty'
    - env: PYENV_VERSION='2.7.9' OS='OS X Yosemite'
    - env: PYENV_VERSION='2.7.9' OS='OS X El Capitan'

install:
  - source .travis/install.sh
  - python --version
  - export PATH="${PWD}/bin:$PATH"
  - if [ "X$TRAVIS_OS_NAME" = "Xosx" ] ; then brew update ; brew install --force-bottle gcc ; fi
  - sudo apt-get update && sudo apt-get install -qq python-pip python-virtualenv gfortran bc || true

script:
  - coverage run runtests ${TAU_PY_CHANGED_FILES:-} # just lint touched files
  - |
    set -o errexit
    set -o pipefail
    # pylint returns non-zero even when score > 9
    pylint --rcfile=pylintrc -r y -j 4 packages/tau > report.txt || true
    score=$(sed -n 's/^[[:blank:]]*[yY]our code has been rated at \(-\{0,1\}[0-9]\{1,\}\.\{0,1\}[0-9]*\)\/10.*/\1/p' report.txt)
    cat report.txt
    if [[ $(echo "$score > 9" | bc -l) == 0 ]]; then
      # bc returns 0 for false, 1 for true... don't blame me I just work here...
      echo "Unacceptable pylint score: $score <= 9!"
      false # throw an error
    else
      echo "Pylint score of $score is acceptable."
    fi
    set +o pipefail
    set +o errexit
  - make -C docs
  - |
    set -o errexit
    tau initialize --storage-level user > tau_init.log &
    tau_init_PID=$!
    echo "tau_init.log will be displayed upon failure"
    while ps -p $tau_init_PID > /dev/null; do
      echo "Still initializing TAU commander..."
      sleep ${SLEEP_INTERVAL:-300} # prevent Travis-CI abort due to inactivity or excessive logging
    done
    set +o errexit

after_success:
  - codecov --env PYENV_VERSION OS
  - |
    [[ "X${USE_VENV:-No}" == X[yY]* ]] && deactivate

after_failure:
  - |
    [[ "X${USE_VENV:-No}" == X[yY]* ]] && deactivate
  - cat "${HOME}/.tau/debug_log"
  - cat tau_init.log

deploy:
  provider: script
  script: .travis/deploy-docs.sh
  skip_cleanup: true
  on:
    branch: master
    condition: $TRAVIS_OS_NAME = linux &&  $PYENV_VERSION = '2.7.9'
    repo: ParaToolsInc/taucmdr # Don't try to deploy on private forks

notifications:
  email:
    recipients:
      - taucmdr-notify@paratools.com
    on_success: always  # options: [always|never|change]
    on_failure: always
    on_start: always
  webhooks:
    urls: # gitter.im announcement
      secure: TQIzGX9yWDc+ayKNpWmNjCCucaGCwt9CYeThbzdmGsA30hJkRRuDNdx5ZDvknRktV+h+QYgLGLR3ueVUuGL0/kf23vPUZD6kTTY0c3ZJ4fonDx5Ydr+zhc1iJzO/Ord1tnY5xxfvKpfWEUekFQT5SSJMt61CQoNmVSDdTDpFcMC4GEzeQD6fdP0BxgiFvw4UOnfU/poM9OmjaVdKoFyax1+gub4mC/GG9faxK6IdtOAtPsGcUOpzBypwj3NRGgDuq+jErnvm3tLitVJz8h1ab5eQMgTAlCK8q3w7x/WaWxsVXnErjDqJIGs9mpxmyOJERoRv7hQdlAZtKlIZsdGpE7O9B9ooBE/zAfRqGHee5CsA/UKx6XDt9h0rYt/zNJ5RcIrbHRZMilwdC4PXXjN7FNNkpDp0LhhpzM19tZx9+Zb/QAGOTwIDq5adQfiF9ctE7OAlvqnSbvhTL0bzLmYthIURc9nBks4uqUAKq/LEnHz2CgiL8fGaJbUXqGSBc/prKYREa9ckfBdjFfngSnLBJB6oLKQBGRA/Y8thi7etu8TZD9CsWcBJhXFJTPkFArFkJVRpURNpQ0OIS54q0bmTW+dPbSJ95v2GEttCuAIyqDgffuwqqVYx0KmaMHKvxUGx0Mu8uC9Mo5FLEDiM05mE/lAgkK9wgwbgFW+A5g2t7x8=
    on_success: always  # options: [always|never|change]
    on_failure: always
    on_start: always
