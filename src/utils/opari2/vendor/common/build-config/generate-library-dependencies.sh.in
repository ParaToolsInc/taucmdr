#!/bin/sh

## 
## This file is part of the Score-P software (http://www.score-p.org)
##
## Copyright (c) 2009-2012, 
##    RWTH Aachen, Germany
##    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
##    Technische Universitaet Dresden, Germany
##    University of Oregon, Eugene, USA
##    Forschungszentrum Juelich GmbH, Germany
##    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
##    Technische Universitaet Muenchen, Germany
##
## See the COPYING file in the package base directory for details.
##

## file generate_library_dependencies.sh
##      Parse all *.la files in the current working directory and
##      recursively the *.la files listed in dependency_libs. Generate
##      a C++ representation of the library dependencies and write it
##      to scorep_library_dependencies.cpp in the current working
##      directory. To be used with the <component>-config tools.
##
##      Assumes that teh client provide std::vector<std::string> libs,
##      ldflags, rpaths, dependency_las and a std::map<std::string,
##      la_object> la_objects. The vectors are temporary, the map will
##      contain the entire information indexed by the library name.The
##      la_object ctor signature is
##      la_object(std::string lib_name,
##                std::string build_dir,
##                std::string install_dir,
##                std::vector<std::string> libs,
##                std::vector<std::string> ldflags,
##                std::vector<std::string> rpaths,
##                std::vector<std::string> dependency_las)
##      e.g.:
##      libs.clear();
##      ldflags.clear();
##      rpaths.clear();
##      dependency_las.clear();
##      libs.push_back( "-lbfd" );
##      libs.push_back( "-lpapi" );
##      libs.push_back( "-lm" );
##      ldflags.push_back( "-L/opt/packages/papi/4.1.2.1/lib" );
##      if ( la_objects.find( "libscorep_mpi" ) != la_objects.end() ) 
##      {
##          la_objects[ "libscorep_mpi" ] =
##              la_object( "libscorep_mpi",
##                         "/home/roessel/silc/build/trunk/gcc_openmpi_static_x86-32/build-backend",
##                         "/home/roessel/silc/build/trunk/gcc_openmpi_static_x86-32/install/lib",
##                         libs,
##                         ldflags,
##                         rpaths,
##                         dependency_las );
##       }

#set -x
set -e

parse_la () 
{
    la_file="$1"
    output_file="$2"

    lib_name=`basename $la_file`
    lib_name=${lib_name%.la}

    # change to .la directory
    old_pwd=`pwd`
    build_dir=`dirname $la_file`
    cd "${build_dir}"

    # extract information form .la"s libdir (=install_dir)
    # later, use @EGREP@
    eval `grep -E "^libdir=" "${la_file}"`
    install_dir="${libdir}"

    # ignore conveniece libraries
    if test "x${libdir}" = "x"; then
        return
    fi

    # extract information form .la"s dependency_libs
    eval `grep -E "^dependency_libs=" "${la_file}"`
    # use @AWK@
    save_ifs="${IFS}"
    IFS=${awk_ifs}
    eval `echo ${dependency_libs} | awk '
    {
        for (i=1; i<= NF; i++) 
        { 
            if      (index($i, "-L") == 1) {ldflags = ldflags $i ":"} 
            else if (index($i, "-R") == 1) {rpath = rpath $i ":"}
            else if (index($i, "-l") == 1) {libs = libs $i ":"}  
            else                           {dependency_la = dependency_la $i ":"} 
        }
    }
    END {
        gsub(/:$/, "", ldflags)
        gsub(/:$/, "", rpath)
        gsub(/:$/, "", libs)
        gsub(/:$/, "", dependency_la)
        print "ldflags=\"" ldflags "\"; " "rpath=\"" rpath "\"; " "libs=\"" libs "\"; " "dependency_la=\"" dependency_la "\""
    }'`
    IFS="${save_ifs}"

    # generate output
    echo "    libs.clear();"           >> ${output_file}
    echo "    ldflags.clear();"        >> ${output_file}
    echo "    rpaths.clear();"         >> ${output_file}
    echo "    dependency_las.clear();" >> ${output_file}

    save_ifs="${IFS}"
    IFS=":"

    for i in ${libs}; do
        echo "    libs.push_back( \"${i}\" );"    >> ${output_file}
    done

    for i in ${ldflags}; do
        echo "    ldflags.push_back( \"${i}\" );" >> ${output_file}
    done

    for i in ${rpath}; do
        echo "    rpaths.push_back( \"${i}\" );"  >> ${output_file}
    done

    for i in ${dependency_la}; do
        dependency_la_name=`basename ${i}`
        dependency_la_name=${dependency_la_name%.la}
        echo "    dependency_las.push_back( \"${dependency_la_name}\" );"     >> ${output_file}
    done

    echo "    if ( la_objects.find( \"${lib_name}\" ) == la_objects.end() ) " >> ${output_file}
    echo "    {"                                                              >> ${output_file}
    echo "        la_objects[ \"${lib_name}\" ] ="                            >> ${output_file}
    echo "            la_object( \"${lib_name}\","                            >> ${output_file}
    echo "                       \"${build_dir}\","                           >> ${output_file}
    echo "                       \"${install_dir}\","                         >> ${output_file}
    echo "                       libs,"                                       >> ${output_file}
    echo "                       ldflags,"                                    >> ${output_file}
    echo "                       rpaths,"                                     >> ${output_file}
    echo "                       dependency_las );"                           >> ${output_file}
    echo "    }" >> ${output_file}
    echo  >> ${output_file}

    # call dependency_las recursively
    for i in ${dependency_la}; do
         parse_la ${i} $2
    done

    IFS="${save_ifs}"
    cd "${old_pwd}"
}


awk_ifs="${IFS}"
start_wd=`pwd`
rm -f ${start_wd}/scorep_library_dependencies.cpp
for i in *.la; do
    parse_la ${start_wd}/${i} ${start_wd}/scorep_library_dependencies.cpp
done
