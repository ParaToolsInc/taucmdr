In order to use the R-project software to do the analysis, it needs to 
be installed and configured correctly.  Follow these steps:

1) Get the latest source from: http://www.r-project.org

2) After extracting the source, configure the build with the following 
   options (including a --prefix, if you want to change the installation 
   location - call configure with the '--help' option for more details).

	$ configure --enable-shared --enable-R-lib --prefix=`pwd`

3) build R, and check the R build.

	$ make
	$ make check

4) Install R.  R can be run from the build directory, but the shared library
   won't be found.  The shared library is necessary for RSJava to work.

	$ make install

5) Get the latest RSJava source from Omegahat:  http://www.omegahat.org/RSJava

6) Install RSJava using R (from the installation directory, something like):

	$ bin/R CMD INSTALL -c SJava_0.67-3.tar.gz

7) Set a environment variable.  When the previous INSTALL command is 
   issued, there will be a message about setting the library path to 
   shared objects.  Do what it says.  The following is ONLY AN EXAMPLE, 
   and probably will not work on your machine.  Please adjust accordingly.
   This example is for csh and variants.  For bash, the syntax varies...

	$ setenv LD_LIBRARY_PATH $(LD_LIBRARY_PATH):\
	  /home/huck2/tools/R-1.9.1/lib/R/library/SJava/libs:\
	  /usr/apps/java/j2sdk1.4.2_04/jre/lib/i386/client:\
	  /usr/apps/java/j2sdk1.4.2_04/jre/lib/i386:\
	  /usr/apps/java/j2sdk1.4.2_04/jre/../lib/i386

8) Test the installation by doing the following:

	$ <path-to-R>/library/SJava/scripts/RJava --example --class org.omegahat.R.Java.Examples.JavaRCall --gui=none

9) There is no step 9!

